#!/usr/bin/env python3

from array import array
import os
import base64 as b64
import click
from vulnerability_analytics.rex_api.DockerBuilder import DockerBuilder
from vulnerability_analytics.rex_api.VunlerabilityAnalysis import VulnerabilityAnalysis

@click.group("cli")
def cli() -> None:
    """Displays information about a binary crash for given input."""

@cli.command("get", help="Displays information about the crash.")
@click.option("--binary-path", required=True, type=str, help="Desired binary path.")
@click.option("--binary-arguments", type=str, help="Arguments provided to the binary, each argument must be separated by comma and have no spaces if none are required.")
@click.option("--binary-input", type=str, help="Input to be provided to the binary after the execution has started.")
@click.option("--base64", is_flag=True, show_default=True, default=False, help="Marks that binary arguments and inpus are encoded in base64.")
def get(
    binary_path: str = "",
    binary_arguments: array = [],
    binary_input: str = "",
    base64: bool = False
) -> None:

    try:
        
        print(binary_path, binary_arguments, binary_input, base64)

        if binary_input is None and binary_arguments is None:
            print('You must provide at least one type of argument.')
            exit(0)

        if binary_input is None:
            binary_input = "Dummy binary_input"

        if(base64):
            # Must have string
            binary_arguments = b64.b64decode(binary_arguments).decode('utf-8')
            binary_input = b64.b64decode(binary_input) # We will have bytes
        else:
            binary_input = bytes(binary_input, 'utf-8') # Must have bytes

        if binary_arguments is not None:
            binary_arguments = binary_arguments.replace(" ", "")
            binary_arguments_parsed = binary_arguments.split(',')

        binary_name = os.path.basename(binary_path).split('.')[0]

        image = DockerBuilder()
        
        # Parse other_arguments
        image.build_custom_image(
            binary_path, binary_name + ":crash", binary_arguments_parsed)

        analyzer = VulnerabilityAnalysis(
            image, binary_input).start()
        input("Press Enter to continue...")
        print(analyzer.export2JSON())

    # Unknown error handler
    except Exception as exception:
        print('Some error occured: ' + str(exception))


def main() -> None:
    cli(prog_name="vulnerability_analytics")

if __name__ == "__main__":
    main()
