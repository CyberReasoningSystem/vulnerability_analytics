import os
import tempfile
import shutil
import typing
import docker

class DockerBuilder:

    tmp_docker_folder: tempfile.TemporaryDirectory
    tmp_dockerfile: str
    client: docker.DockerClient 
    image: docker.models.images.Image

    def __init__(self) -> None:
        # Create a temp file for current config
        self.tmp_docker_folder = tempfile.TemporaryDirectory()
        self.tmp_dockerfile = None
        self.image = None
        self.client = docker.from_env()


    def build_custom_image(self, target_path: str, image_tag: str, *argv: str) -> None:

        self.__prepare_dockerfile(target_path, *argv)

        images = self.client.images.build(
            path = self.tmp_docker_folder.name,
            pull=True,
            tag = image_tag
        )
        image = images[0]
        # print(type(image))
        self.image = image

        # print(self.tmp_dockerfile)
        # import time
        # time.sleep(100000)

        return image

    def __prepare_dockerfile(self, target_path: str, argument_list: typing.List) -> None:
        
        # Copy all resources to the new temp folder
        shutil.copytree(os.path.dirname(os.path.realpath(__file__)) + '/../res/', self.tmp_docker_folder.name, dirs_exist_ok=True)
        # print(self.tmp_docker_folder.name)
        # Initialize the docker client
        self.tmp_dockerfile = self.tmp_docker_folder.name + '/Dockerfile'

        # Copy the binary to the temp folder
        target_path = os.path.abspath(target_path)
        # print(target_path)
        if not os.path.exists(target_path):
            print("Binary does not exist!")
            exit(0)

        # Copy the binary
        shutil.copy2(target_path, self.tmp_docker_folder.name)

        # Create the ENTRYPOINT command using the followint template
        entry_point = 'ENTRYPOINT ["/ld-linux-x86-64.so.2", "--library-path", "/", ' + '"' + os.path.basename(target_path) + '"'
        # If we have some additional arguments, add them
        
        if(len(argument_list)):
            for arg in argument_list:
                entry_point = entry_point + ', "' + arg + '"'

        # Then close the statement
        entry_point = entry_point + ']'

        # Open temp file in append mode and add copy command (used to copy the binary) and the ENTRYPOINT command
        with open(self.tmp_dockerfile, 'a') as dockerfile:
            dockerfile.write("\nCOPY {} /\n".format(os.path.basename(target_path)))
            dockerfile.write("\n" + entry_point + "\n")







