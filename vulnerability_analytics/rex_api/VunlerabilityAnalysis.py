from xmlrpc.client import boolean
from vulnerability_analytics.rex_api.DockerBuilder import *
import archr
import rex
import logging
import typing
from archr.analyzers.rr import *
import json 

class VulnerabilityAnalysis:

    crash : rex.Crash
    dockerImage : DockerBuilder
    crashInput : str
    crashTarget : archr.targets.DockerImageTarget
    localLogger : logging.Logger
    crashOk : boolean

    def __init__(self, dockerImage : DockerBuilder, crashInput : str) -> None:

        # Configure loggers for angr and rex
        logging.getLogger("angr.exploration_techniques.tracer").setLevel(logging.CRITICAL)
        logging.getLogger("rex").setLevel(logging.INFO)
    
        # Configure logger for our program

        # Get custom logger for out app
        self.localLogger = logging.getLogger('crs.vulnerability_analysis')
        # By using this we can log everything
        # self.localLogger = logging.getLogger()
        self.localLogger.setLevel(logging.DEBUG)
        
        # Initialize components
        self.crashOk = False
        self.dockerImage = dockerImage
        self.crashInput = crashInput

        if(not self.dockerImage.image):
            self.localLogger.error('Image does not exist or some error has occured!')
            exit(0)

        # Do not contrain the crash input as it could be anything...

    def start(self): #-> typing.VulnerabilityAnalysis:
        
        self.crashTarget = archr.targets.DockerImageTarget(self.dockerImage.image.tags[0]).build().start()
        self.crash = rex.Crash(self.crashTarget, self.crashInput, aslr=False, use_rop=False) 
        self.localLogger.info(self.crash.crash_types)
        
        self.crashOk = True

        return self

    
    def getCrashTypes(self) -> typing.List:

        '''List containing identified crash types'''

        if self.crashOk:       
            return self.crash.crash_types 
        self.localLogger.error('Crash not triggered!')
        return None

    def getFunctionAddress(self) -> str:

        '''Current function hex addres as string'''

        if self.crashOk:       
            return hex(self.crash.state.callstack.func_addr)
        self.localLogger.error('Crash not triggered!')
        return None

    def getBasicBlockAddress(self) -> str:

        '''Address of the basic block that called the current function as hex string'''

        if self.crashOk:       
            return hex(self.crash.state.callstack.func_addr)
        self.localLogger.error('Crash not triggered!')
        return None

    def getReturnAddress(self) -> str:

        '''Return address of the current function as hex string'''

        if self.crashOk:       
            return hex(self.crash.state.callstack.ret_addr)
        self.localLogger.error('Crash not triggered!')
        return None

    def getStackPointer(self) -> str:

        '''Return address of the current stack pointer as hex string'''

        if self.crashOk:       
            return hex(self.crash.state.callstack.stack_ptr)
        self.localLogger.error('Crash not triggered!')
        return None


    def getJumpKind(self) -> str:

        '''Type of executed jump 
        Source here: https://github.com/angr/fidget/blob/0f255bbd11c6721d39581c5d3d2863fce5fad785/fidget/structures.py'''

        if self.crashOk:       
            return self.crash.state.callstack.jumpkind
        self.localLogger.error('Crash not triggered!')
        return None

    def getCoreRegisters(self) -> typing.Dict:

        '''Returns a dictionary containing all core registers'''

        if self.crashOk:       
            return self.crash.core_registers
        self.localLogger.error('Crash not triggered!')
        return None

    def export2JSON(self) -> str:

        '''Export crash fields into JSON format'''

        if self.crashOk:       
            return CrashExport(
                self.getCrashTypes(),
                self.getFunctionAddress(),
                self.getBasicBlockAddress(),
                self.getReturnAddress(),
                self.getStackPointer(),
                self.getJumpKind(),
                self.getCoreRegisters()
            ).toJson()
        self.localLogger.error('Crash not triggered!')
        return None


class CrashExport:

    '''Object used to export the following information to JSON object'''

    def __init__(self, 
            crashTypes : typing.List,
            functionAddress : str,
            basicBlockAddress : str,
            returnAddress : str,
            stackPointer : str,
            jumpKind : str,
            coreRegisters: typing.Dict) -> None:

        self.crashTypes = crashTypes
        self.functionAddress = functionAddress
        self.basicBlockAddress = basicBlockAddress
        self.returnAddress = returnAddress
        self.stackPointer = stackPointer
        self.jumpKind = jumpKind
        self.coreRegisters = coreRegisters

    def toJson(self):
        return json.dumps(self, default=lambda o: o.__dict__)

